name: Build

on:
  pull_request:
  push:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  PROJECT_NAME: waspinput
  NAME_WIN32: waspinput32.dll
  NAME_WIN64: waspinput64.dll

jobs:
  update_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      - name: Get commit hash
        id: commit-hash
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Replace version hash
        run: |
          sed -i "s/const VERSION: &str = \"[a-f0-9]\{7\}\"/const VERSION: \&str = \"$COMMIT_HASH\"/" src/shared/memory.rs
      - name: Commit updated version
        run: |
          git config --global user.name "Wasp Bot"
          git config --global user.email "waspbot@waspcripts.com"
          git add src/shared/memory.rs
          git commit -m "Bump version"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: update_version
    runs-on: windows-latest
    strategy:
      matrix:
        target: [i686-pc-windows-gnu, x86_64-pc-windows-gnu]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4.2.2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.87.0
          target: ${{ matrix.target }}
          default: true
          override: true

      - name: Check rustc version
        run: |
          rustc --version --verbose
          rustup show

      - name: Install MSYS2 and MinGW-w64
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-i686-gcc
            mingw-w64-x86_64-gcc

      - name: Add MinGW to PATH
        run: |
          if ("${{ matrix.target }}" -eq "i686-pc-windows-gnu") {
            echo "C:\msys64\mingw32\bin" >> $env:GITHUB_PATH
          } else {
            echo "C:\msys64\mingw64\bin" >> $env:GITHUB_PATH
          }
        shell: pwsh

      - name: Verify toolchain
        run: |
          where i686-w64-mingw32-gcc
          where x86_64-w64-mingw32-gcc
        shell: pwsh

      - name: Build for ${{ matrix.target }}
        run: cargo build --release --target=${{ matrix.target }}

      - name: Rename output DLL
        run: |
          $target = "${{ matrix.target }}"
          $original = "target\$target\release\$env:PROJECT_NAME.dll"

          if ($target -eq "i686-pc-windows-gnu") {
            $renamed = "target\$target\release\$env:NAME_WIN32"
          } else {
            $renamed = "target\$target\release\$env:NAME_WIN64"
          }

          if (Test-Path $original) {
            Move-Item $original $renamed -Force
            Write-Host "Renamed $original to $renamed"
          } else {
            Write-Host "DLL not found: $original"
            exit 1
          }
        shell: pwsh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-dll
          path: |
            target/${{ matrix.target }}/release/${{ matrix.target == 'i686-pc-windows-gnu' && env.NAME_WIN32 || env.NAME_WIN64 }}

  version:
    needs: build
    if: ${{ success() }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Set up Git
        run: |
          git config --global user.name "Wasp Bot"
          git config --global user.email "waspbot@waspcripts.com"

      - name: Get current date and commit hash
        run: |
          echo "CURRENT_YEAR=$(date +'%Y')" >> $GITHUB_ENV
          echo "CURRENT_MONTH=$(date +'%m')" >> $GITHUB_ENV
          echo "CURRENT_DAY=$(date +'%d')" >> $GITHUB_ENV
          echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

          TAG_NAME="$(date +'%Y').$(date +'%m').$(date +'%d')-$(git rev-parse --short HEAD)"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Create tag
        run: |
          git tag ${{ env.TAG_NAME }}
          git push origin ${{ env.TAG_NAME }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ env.TAG_NAME }} \
            artifacts/i686-pc-windows-gnu-dll/${{ env.NAME_WIN32 }} \
            artifacts/x86_64-pc-windows-gnu-dll/${{ env.NAME_WIN64 }} \
            --title "${{ env.TAG_NAME }}" \
            --notes "Automated plugin release"
